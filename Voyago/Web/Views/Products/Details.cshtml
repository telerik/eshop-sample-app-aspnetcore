@{
	ViewData["Title"] = "Product Details";
}
@model Models.ViewModels.ProductDetailsViewModel;

<div class="details-container">
	@(Html.Kendo().Breadcrumb()
		.Name("breadcrumb")
		.Navigational(true)
		.Items(items =>
		{
			items.Add()
			.Type(BreadcrumbItemType.RootItem)
			.Href("/Home/Index")
			.ShowText(false)
			.Icon("home")
			.ShowIcon(true);
			items.Add()
			.Type(BreadcrumbItemType.Item)
			.Href("/Home/" + Model.Category)
			.Text(Model.Category)
			.ShowText(true);
			items.Add()
			.Type(BreadcrumbItemType.Item)
			.Href(@Url.Action("Category", "Products", new { subCategory = Model.SubCategory }))
			.Text(Model.SubCategory)
			.ShowText(true);
			items.Add()
			.Type(BreadcrumbItemType.Item)
			.Href(@Url.Action("Details", "Products", new { productId = Model.Id }))
			.Text(Model.Name)
			.ShowText(true);
		})
	)
	<div class="model-details">
		<div class="model-image">
			<img src="@Url.Action("GetProductLargePhotoById", "Products")?photoId=@Model.PhotoId">			
		</div>
		<div class="model-info">
			<div class="info-top">
				<h1 class="details-heading">
					@{
						if (Model.Model == null)
						{
																									@Model.Name
						}
						else
						{
																									@Model.Model
						}
					}
				</h1>
				@(Html.Kendo().Rating()
					.Name("productRating")
					.Min(1)
					.Max(5)
					.Precision("half")
					.Value(@Model.AverageRating)
					.Readonly(true)
					.Label(false)
				)
				<hr class="splitter1">
			</div>
			<div class="info-bottom">
				<div class="bottom-left">
					<div class="info-row" style="gap:8%;">
						<p class="info-title">Product Name</p>
						<p class="info-value">@Model.Name</p>
					</div>
					<div class="info-row" style="gap:13%;">
						<p class="info-title">Product No</p>
						<p>@Model.ProductNumber</p>
					</div>
					
						@{
							if (Model.Size != null)
							{
																							<div class="info-row" style="gap:25%;">
																								<p class="info-title">Size</p>
																								@(Html.Kendo().DropDownList()
										.Name("sizePicker")
										.Value(@Model.Size)
										.FillMode(FillMode.None)
										.Rounded(Rounded.None)
										.DataSource(source =>
										{
											source.Read(read =>
											{
												read.Action("GetAvailableSizes", "Products", new { productId = @Model.Id });
											});
										})
										.Events(e => e.Change(@<text>function () { selectAlternateProductVersion(@Model.ModelId); }</text>))
																								)
																						 	</div>
							}
						}
					@{
						if(Model.Weight != 0)
						{
																	<div class="info-row" style="gap:20%;">
																		<p class="info-title">Weight</p>
																		<p>@Model.Weight</p>
																	</div>
						}
					}
					@{
						if(Model.Color != null)
						{
																			<div class="info-row" style="gap:22%;">
																				<p class="info-title">Color</p>
																				<ul id="colorPicker"></ul>
																			</div>
						}
					}
					@{
						if(Model.Description != null) 
						{
																			<div class="info-row" style="gap:11%;">
																				<p class="info-title">Description</p>
																				<p class="info-description">@Model.Description</p>
																			</div>
						}
					}
				</div>
				<div class="bottom-right">
					@{
						if (Model.DiscountPct != 0)
						{
																									<label class="price"> @(string.Format("{0:C}", Model.FinalPrice))</label>
						}
						else
						{
																									<label class="price">$@Model.ListPrice.ToString("N2")</label>
						}
					}
					<div class="product-buttons">
						@(Html.Kendo().Button()
							.Name("addToCartButton_" + @Model.Id)
							.Content("Add to cart")
							.ThemeColor(ThemeColor.Primary)
							.Icon("cart")
							.HtmlAttributes(new { type = "button" })
							.Events(e => e.Click("addProductToShoppingCart"))
							.Enable(Model.InStock > 0)
						)
						@(Html.Kendo().Button()
							.Name("addToFavoritesButton_" + @Model.Id)
							.Content("Add to Favorites")
							.Icon("heart-outline")
							.HtmlAttributes(new { type = "button"  })
							.Events(e => e.Click("addProductToFavorites"))
						)
					</div>
				</div>
			</div>
		</div>
	</div>

	<hr class="splitter2">

	@{
		if (Model.ModelId != null)
		{
								<div class="similar-products">
									<h4 class="similar-products-title">Similar Products</h4>
									@(Html.Kendo().ListView<Models.ViewModels.ProductAllViewModel>()
					.Name("similarProductsListView")
					.TagName("div")
					.ClientTemplateId("product-template")
					.Navigatable()
					.Bordered(false)
					.DataSource(dataSource => dataSource
						.Ajax()
						.ServerOperation(true)
						.Read(r => r.Action("ReadSimilarProducts", "Products", new { productId = Model.Id, subCategoryId = @Model.SubCategoryId, count = 4 }).Type(HttpVerbs.Get))
					)
					.Events(e => e.DataBound("distinguishFavorites"))
									)
								</div>
		}
	}
</div>

<script type="text/html" id="product-template">
	@await Html.PartialAsync("_TileProductCard.cshtml")
</script>

<script>
	$(document).ready(function () {
		var productId = "@Model.Id";
		var modelId = "@Model.ModelId";

		$.get("/Products/GetAvailableColors?productId=" + productId, function (data) {
			if(data.length > 0) {
				$("#colorPicker").kendoRadioGroup({
					items: data,

					layout: "horizontal",
					value: "@Model.Color",
					change: function () { selectAlternateProductVersion(modelId); }
				});
			}
		});

		distinguishFavorites();
	});
</script>

<link rel="stylesheet" href="/css/product_details.css">