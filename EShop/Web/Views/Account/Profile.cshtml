@{
	ViewData["Title"] = "Profile Page";
}

@model Models.ViewModels.UserProfileViewModel

<div class="profile-container">
    <div class="profile-header">Profile</div>
	@(Html.Kendo().TabStrip()
		.Name("tabstrip_profile")
		.Navigatable(true)
		.SelectedIndex(0)
        .HtmlAttributes(new { @class = "profile-tabstrip" })
		.TabPosition(TabStripTabPosition.Top)
        .Animation(false)
		.Items(tabstrip =>
		{
			tabstrip.Add().Text("Personal details")
            .ImageUrl("~/images/tab-user.png")
            .Selected(true)
			.Content(@<text>
                @(Html.Kendo().Form<Models.InputModels.ProfileUserInputModel>()
                    .Name("personal_details")
                    .HtmlAttributes(new { action = "SaveUserPersonalDetails", controller = "Account", method = "POST" })
                    .ButtonsTemplateId("profileFormsButtons")
                    .Validatable(v =>
                    {
                        v.ValidateOnBlur(true);
                        v.ValidationSummary(vs => vs.Enable(false));
                    })
                    .Layout("grid")
                    .Grid(g => g.Cols(1).Gutter(12))
                    .Items(i =>
                    {
                        i.Add()
                            .Field(f => f.FirstName)
                            .Label(l => l.Text("First Name"));
                        i.Add()
                            .Field(f => f.LastName)
                            .Label(l => l.Text("Last Name"));
                        i.Add()
                            .Field(f => f.Phone)
                            .Label(l => l.Text("Phone"))
                            .Editor(editor => editor
                                .MaskedTextBox()
                                .Mask("999-000-0000")
                                .HtmlAttributes(new { data_validmask_msg = "Phone number is incomplete"}));
                    }))
            </text>);
            tabstrip.Add().Text("Password")
            .ImageUrl("~/images/tab-password.png")
            .Content(@<text>
                @(Html.Kendo().Form<Models.InputModels.PasswordUserInputModel>()
                    .Name("password_details")
                    .HtmlAttributes(new { action = "SaveUserPassword", controller = "Account", method = "POST" })
                    .ButtonsTemplateId("profileFormsButtons")
                    .Validatable(v =>
                    {
                        v.ValidateOnBlur(true);
                        v.ValidationSummary(vs => vs.Enable(false));
                    })
                    .Layout("grid")
                    .Grid(g => g.Cols(1).Gutter(17))
                    .Items(i =>
                    {
                        i.Add()
                            .Field(f => f.Password)
                            .InputHtmlAttributes(new { @type="password",  pattern = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$", required = "required", validationmessage = "Please enter a valid password."})
                            .Hint("Your password must be at least 8 symbols and should include uppercase and lowercase letters and numbers.")
                            .Label(l => l.Text("Change Password"));
                        i.Add()
                            .Field(f => f.ConfimPassword)
                            .InputHtmlAttributes(new {@type = "password"})
                            .Label(l => l.Text("Confim Password"));
                    }))
            </text>);
			tabstrip.Add()
            .Text("Shipping address")
            .ImageUrl("~/images/tab-address.png")
            .Content(@<text>
                @(Html.Kendo().Form<Models.InputModels.AddressUserInputModel>()
                    .Name("shipping_details")
                    .HtmlAttributes(new { action = "SaveUserShippingDetails", controller = "Account", method = "POST" })
                    .ButtonsTemplateId("profileFormsButtons")
                    .Layout("grid")
                    .Grid(g => g.Cols(2).Gutter(17))
                    .Validatable(v =>
                    {
                        v.ValidateOnBlur(true);
                        v.ValidationSummary(vs => vs.Enable(false));
                    })
                    .Items(i =>
                    {
                        i.Add()
                            .Field(f => f.Street)
                            .ColSpan(2)
                            .Label(l => l.Text("Street"));
                        i.Add()
                            .Field(f => f.City)
                            .ColSpan(2)
                            .Label(l => l.Text("City"));
                        i.Add()
                            .Field(f => f.State)
                            .ColSpan(1)
                            .Label(l => l.Text("State"))
                            .Editor(editor => editor
                                .DropDownList()
                                    .OptionLabel("Select state")
                                    .DataTextField("Name")
                                    .DataValueField("StateProvinceCode")
                                    .DataSource(source => {
                                        source.Read(read =>
                                        {
                                            read.Action("GetStates", "Account");
                                        });
                                    })
                            );
                        i.Add()
                            .ColSpan(1)
                            .Field(f => f.Zipcode)
                            .Label(l => l.Text("Zip code"))
                            .Editor(editor => editor
                                .MaskedTextBox()
                                .Mask("00000")
                                .HtmlAttributes(new { data_validmask_msg = "Zip code is not valid." }));
                        i.Add()
                            .ColSpan(2)
                            .Field(f => f.Country)
                            .Label(l => l.Text("Country"))
                            .Editor(editor => editor
                                .DropDownList()
                                    .DataTextField("Text")
                                    .DataValueField("Value")
                                    .Events(e => e.Change("changeUserCountry"))
                                    .OptionLabel("Select country")
                                    .BindTo(new List<SelectListItem>() {
                                        new SelectListItem() {
                                            Text = "Germany",
                                            Value = "DE"
                                        },
                                        new SelectListItem() {
                                            Text = "France",
                                            Value = "FR"
                                        },
                                        new SelectListItem() {
                                            Text = "United Kingdom",
                                            Value = "UK"
                                        },
                                        new SelectListItem() {
                                            Text = "United States of America",
                                            Value = "US"
                                        }
                                    })
                            );
                    }))
            </text>);
		})
	)
</div>

<input type="hidden" id="loggedUserEmail" value="@Model.EmailAddress" />

<script type="text/x-kendo-template" id="profileFormsButtons">
    <button class="k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary k-form-submit" type="submit">
        <span class="k-button-text">Save</span>
    </button>
    <button class="k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-form-clear">
        <span class="k-button-text">Cancel</span>
    </button>
</script>

<script type="text/javascript">
    $(document).ready(function () {
        if($("#loggedUserEmail").val() == "jaxons.danniels@company.com") {
            $("#Password").data("kendoTextBox").enable(false);
            $("#ConfimPassword").data("kendoTextBox").enable(false);
            $("#password_details .k-button[type='submit']").prop('disabled', true);
            $("#password_details .k-form-clear").prop('disabled', true);
        }

        let countryDDL = $("#Country").data("kendoDropDownList");
        if(countryDDL.value() != "US") {
            $("#State").data("kendoDropDownList").enable(false);
        }

        $("#password_details").kendoValidator({
            rules: { 
                confirmPassCheck: function (input) {
                    if (input.is("[name=ConfimPassword]") && input.val()) {
                        let enteredPass = $("#Password").data("kendoTextBox");
                        let confirmedPass = $("#ConfimPassword").data("kendoTextBox");
                        if(enteredPass.value() != confirmedPass.value()) {
                            input.attr("data-confirmPassCheck-msg", "Passwords do not match.");
                            return false;
                        }
                        return true;
                    }
                    return true;
                }
            }
        });

        $("#shipping_details").kendoValidator({
            rules: { 
                stateCheck: function (input) {
                    if (input.is("[name=State]")) {
                        let selectedState = $("#State").data("kendoDropDownList");
                        let selectedCountry = $("#Country").data("kendoDropDownList");
                        if(selectedCountry.value() == "US" && !selectedState.value()) {
                            input.attr("data-stateCheck-msg", "Invalid State.");
                            return false;
                        }
                        return true;
                    }
                    return true;
                }
            }
        });
    });
</script>