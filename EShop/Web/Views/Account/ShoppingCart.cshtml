@{
	ViewData["Title"] = "Shopping Cart";
}

<div class="shopping-cart-container">
	<div class="shopping-cart-title">Your cart items</div>

	@{
		if (ViewBag.ItemsCount == 0)
		{
			<div class="empty-shopping-cart-container">
				<img class="empty-cart-image" src="~/images/shopping_cart_empty.svg" alt="Your shopping cart is empty"/>
				<p class="empty-cart-heading">Unfortunately, your cart is empty...</p>
				<div class="empty-cart-description">
					<p>Looks like you have not added anything to your cart. Go ahead and <a style="color: var(--eshop-blue);"  href="@Url.Action("Index", "Home")#top-picks">explore our top-picks.</a>
					</p>
				</div>
			</div>
		}
		else
		{
				<a class="continue-shopping" href="@Url.Action("Summary","Products")">Continue shopping</a>

				@(Html.Kendo().Grid<Models.ViewModels.ShoppingCartItemViewModel>()
				.Name("shoppingCartGrid")
				.Columns(columns =>
				{
					columns.Bound(p => p.ProductName).ClientTemplateId("shoppingCartProduct-template");
					columns.Bound(p => p.ProductPrice);
					columns.Bound(p => p.Quantity).Editable("function() { return false; }")
						.HtmlAttributes(new { @class = "templateCell" })
						.ClientTemplateId("quantityEditor-template");
					columns.Bound(p => p.Total)
						.HtmlAttributes(new { @class = "currency" })
						.HeaderHtmlAttributes(new { style = "text-align: right; justify-content: right" })
						.HtmlAttributes(new { style = "text-align: right" });
				})
				.Editable(editable => editable.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(false))
				.DataSource(dataSource => dataSource
					.Ajax()
					.ServerOperation(true)
					.Model(model =>
					{
						model.Id(p => p.ShoppingCartItemId);
						model.Field(p => p.ProductName).Editable(false);
						model.Field(p => p.ProductPrice).Editable(false);
						model.Field(p => p.Quantity);
						model.Field(p => p.Total).Editable(false);
					})
					.Read(read => read.Action("GetUserShoppingCartItems", "Account").Type(HttpVerbs.Get))
					.Update(update => update.Action("UpdateUserShoppingCartItem", "Account").Type(HttpVerbs.Post))
					.Destroy(destroy => destroy.Action("RemoverUserShoppingCartItem", "Account").Type(HttpVerbs.Post))
				)
				.Events(e => e.DataBound("shoppingCartGridOnDataBound"))
				)
			<div class="sub-total-container">
				<div class="sub-total-details">
					<div class="sub-total">
						<div>Sub-total:</div>
						<div id="subTotalValue"></div>
					</div>
					<span class="tax-and-shipping">Tax and shipping cost will be calculated later</span>
				</div>
				@(Html.Kendo().Button()
					.Name("checkoutButton")
					.Content("Check-out")
					.ThemeColor(ThemeColor.Primary)
					.Events(e => e.Click("checkoutShoppingCart"))
				)
			</div>
		}
	}
</div>

<script id="shoppingCartProduct-template" type="text/html">
	<div class="product-column">
		<a class="product-image-container" href="@Url.Action("Details", "Products")?productId=#:ProductId#">
			<img class="product-image" src="@Url.Action("GetProductLargePhotoById", "Products")?photoId=#:ProductPhotoId#" alt="#:ProductName# image"/>
		</a>
		<div class="product-details">
			<a href="@Url.Action("Details", "Products")?productId=#:ProductId#">
				<p class="product-name">#:ProductName#</p>
			</a>
			<p class="remove-product" id="remove_#:ShoppingCartItemId#" onclick="removeItemFromShoppingCart(#:ShoppingCartItemId#)" style="cursor:pointer">Remove</p>
		</div>
	</div>
</script>

<script id="quantityEditor-template" type="text/html">
	@(Html.Kendo().NumericTextBox()
		.Name("quantityEditor_#=ShoppingCartItemId#")
		.HtmlAttributes(new { data_bind = "value: Quantity", @class = "quantity-editor" })
		.Decimals(0)
		.Format("\\#")
		.Min(1)
		.Max(100)
		.Rounded(Rounded.None)
		.Events(e => e.Change("updateShoppingCartChanges"))
		.ToClientTemplate()
	)
</script>

